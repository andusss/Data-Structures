#include <iostream>
#include <string>
using namespace std;

#define SIZE 5  // maximum number of print jobs

class CircularQueue {
    string jobs[SIZE];
    int front, rear;

public:
    CircularQueue() {
        front = -1;
        rear = -1;
    }

    int isFull() {
        if ((rear + 1) % SIZE == front)
            return 1;
        return 0;
    }

    int isEmpty() {
        if (front == -1)
            return 1;
        return 0;
    }

    void enqueue(string job) {
        if (isFull()) {
            cout << "\nPrinter Spooler is full! Cannot add new job.\n";
            return;
        }
        if (isEmpty()) {
            front = rear = 0;
        } else {
            rear = (rear + 1) % SIZE;
        }
        jobs[rear] = job;
        cout << "\nPrint Job \"" << job << "\" added to the queue.\n";
    }

    void dequeue() {
        if (isEmpty()) {
            cout << "\nNo jobs in the queue to process.\n";
            return;
        }
        cout << "\nProcessing Job: \"" << jobs[front] << "\" completed.\n";
        if (front == rear) {  // only one job
            front = rear = -1;
        } else {
            front = (front + 1) % SIZE;
        }
    }

    void display() {
        if (isEmpty()) {
            cout << "\nPrinter Queue is empty.\n";
            return;
        }
        cout << "\nCurrent Print Queue: ";
        int i = front;
        while (true) {
            cout << jobs[i];
            if (i == rear) break;
            cout << " -> ";
            i = (i + 1) % SIZE;
        }
        cout << "\n";
    }
};

int main() {
    CircularQueue spooler;
    int choice;
    string job;

    do {
        cout << "\n--- Printer Spooler Menu ---\n";
        cout << "1. Add Print Job (Enqueue)\n";
        cout << "2. Process Print Job (Dequeue)\n";
        cout << "3. Show Print Queue\n";
        cout << "4. Exit\n";
        cout << "\nChoose an option: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "\nEnter Job Name: ";
                cin >> job;
                spooler.enqueue(job);
                break;

            case 2:
                spooler.dequeue();
                break;

            case 3:
                spooler.display();
                break;

            case 4:
                cout << "\nExiting Printer Spooler. Goodbye!\n";
                break;

            default:
                cout << "\nInvalid option. Try again.\n";
        }
    } while (choice != 4);

    return 0;
}
